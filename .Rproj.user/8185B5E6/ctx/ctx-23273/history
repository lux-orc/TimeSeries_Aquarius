path_out
path_csv
path_folder
file.path(path_csv, "/")
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
source("_tools/fun_s.R")  # Load the customised functions and set time zone as "Etc/GMT-12"
# # Remove the negative values (data gaps)
# neg_2_na <- function(x) return(fifelse(x >= 0, x, NA_real_))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Load the reference list between the plate numbers and the site names
path_info <- file.path(path, "info")
plate_info <- fread(file.path(path_info, "plate_info.csv"), key = "ID")
param_info <- fread(file.path(path_info, "param_info.csv"), key = "Param")
# Detect the folders in '/out/csv' folder
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
path_folders
path_folders
path_folder <- "./out/csv/dLL"
fs <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
fn <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
fs
fn
fp
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
source("_tools/fun_s.R")  # Load the customised functions and set time zone as "Etc/GMT-12"
# # Remove the negative values (data gaps)
# neg_2_na <- function(x) return(fifelse(x >= 0, x, NA_real_))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Load the reference list between the plate numbers and the site names
path_info <- file.path(path, "info")
plate_info <- fread(file.path(path_info, "plate_info.csv"), key = "ID")
param_info <- fread(file.path(path_info, "param_info.csv"), key = "Param")
# Detect the folders in '/out/csv' folder
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
path_folder
path_folders
path_folder <- "./out/csv/dLL"
f_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
f_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
f_paths
f_names
(!length(f_names))
ts_df <- NULL
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
csv_paths
csv_names
ts_df <- NULL
csv_paths
csv_names
csv_path
csv_paths
csv_path <- "./out/csv/dLL/Lake+Level.Telemetry@EM639.csv"
csv_path
path_folder
path_csv
sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
folder_name
path_folder
path_csv
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
folder_name
csv_names
csv_paths
csv_path
ts_i <- fread(f, colClasses = list(character = "TimeStamp"))
csv_path
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
ts_df
ts_i
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
ts_df
path_folder
csv_path
file_2_save <- file.path(path_out, paste0(folder_name, ".parquet"))
# List the data availability
file_2_save
ts_df
parquet_2_save
parquet_2_save <- file.path(path_out, paste0(folder_name, ".parquet"))
parquet_2_save
path_folder
"All data from " path_folder
path_folder
paste0(folder_name, ".parquet")
parquet_2_save
paste0("All data from folder ", path_folder, " has been saved as ", parquet_2_save)
paste0("All data from folder <", path_folder, "> has been saved as ", parquet_2_save)
paste0(folder_name, ".parquet")
paste0("All data from folder <", path_folder, "> has been saved as ", parquet_name, " in folder ", path_out)
parquet_name <- paste0(folder_name, ".parquet")
paste0("All data from folder <", path_folder, "> has been saved as ", parquet_name, " in folder ", path_out)
cp
cp("1", "2")
cp("1", "2", fg=36)
cp("1", "2", fg = 33)
cat(cp("1", "2", fg = 33))
cat(cp("1", "2", display = 0, bg = 48, fg = 33))
cat(cp("12", display = 0, bg = 48, fg = 33))
cat(cp("12", display = 3, bg = 48, fg = 33))
cat(cp("12", display = 2, bg = 48, fg = 33))
paste0(
"All data from folder",
"<", path_folder, ">",
"has been saved as ",
parquet_name,
" in folder ",
path_out
)
parquet_name
msg <- paste0(
"All data from folder",
cp(paste0("<", path_folder, ">"), fg = 33),
" has been saved as",
cp(parquet_name, display = 1, fg = 32),
" in folder",
path_out
)
msg
cat(msg)
paste0("<", path_folder, ">")
msg <- paste0(
"All data from folder",
cp(path_folder, fg = 33),
" has been saved as",
cp(parquet_name, display = 1, fg = 32),
" in folder",
path_out
)
cat(msg)
paste0(
"All data from folder <",
path_folder,
"> has been saved as",
parquet_name,
" in folder",
path_out
)
msg <- paste0(
"All data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
msg <- paste0(
"All data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
cat(cp(msg), fg = 33)
cat(cp(msg, fg = 33))
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out,
)
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
cat(cp(msg, fg = 33))
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
source("_tools/fun_s.R")  # Load the customised functions and set time zone as "Etc/GMT-12"
# # Remove the negative values (data gaps)
# neg_2_na <- function(x) return(fifelse(x >= 0, x, NA_real_))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Load the reference list between the plate numbers and the site names
path_info <- file.path(path, "info")
plate_info <- fread(file.path(path_info, "plate_info.csv"), key = "ID")
param_info <- fread(file.path(path_info, "param_info.csv"), key = "Param")
# Detect the folders in '/out/csv' folder
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
# For each folder, read the csv data files
for (path_folder in path_folders) {
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
for (csv_path in csv_paths) {
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
}
# Save the data from this folder
parquet_name <- paste0(folder_name, ".parquet")
parquet_2_save <- file.path(path_out, parquet_name)
arrow::write_parquet(ts_df, parquet_2_save)
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
}
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
# For each folder, read the csv data files
for (path_folder in path_folders) {
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
for (csv_path in csv_paths) {
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
}
# Save the data from this folder
parquet_name <- paste0(folder_name, ".parquet")
parquet_2_save <- file.path(path_out, parquet_name)
arrow::write_parquet(ts_df, parquet_2_save)
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
cat(cp(msg, display = 3, fg = 33))
}
# For each folder, read the csv data files
for (path_folder in path_folders) {
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
for (csv_path in csv_paths) {
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
}
# Save the data from this folder
parquet_name <- paste0(folder_name, ".parquet")
parquet_2_save <- file.path(path_out, parquet_name)
arrow::write_parquet(ts_df, parquet_2_save)
msg <- paste0(
"All data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
cat(cp(msg, display = 3, fg = 33), sep = "\n\n")
}
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
source("_tools/fun_s.R")  # Load the customised functions and set time zone as "Etc/GMT-12"
# # Remove the negative values (data gaps)
# neg_2_na <- function(x) return(fifelse(x >= 0, x, NA_real_))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Load the reference list between the plate numbers and the site names
path_info <- file.path(path, "info")
plate_info <- fread(file.path(path_info, "plate_info.csv"), key = "ID")
param_info <- fread(file.path(path_info, "param_info.csv"), key = "Param")
# Detect the folders in '/out/csv' folder
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
# For each folder, read the csv data files
for (path_folder in path_folders) {
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
for (csv_path in csv_paths) {
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
}
# Save the data from this folder
parquet_name <- paste0(folder_name, ".parquet")
parquet_2_save <- file.path(path_out, parquet_name)
arrow::write_parquet(ts_df, parquet_2_save)
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
message(msg)
}
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
source("_tools/fun_s.R")  # Load the customised functions and set time zone as "Etc/GMT-12"
# # Remove the negative values (data gaps)
# neg_2_na <- function(x) return(fifelse(x >= 0, x, NA_real_))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Load the reference list between the plate numbers and the site names
path_info <- file.path(path, "info")
plate_info <- fread(file.path(path_info, "plate_info.csv"), key = "ID")
param_info <- fread(file.path(path_info, "param_info.csv"), key = "Param")
# Detect the folders in '/out/csv' folder
path_folders <- list.dirs(path_csv, recursive = FALSE, full.names = TRUE)
# For each folder, read the csv data files
for (path_folder in path_folders) {
csv_paths <- list.files(path_folder, recursive = FALSE, full.names = TRUE)
csv_names <- list.files(path_folder, recursive = FALSE, full.names = FALSE)
folder_name <- sub(pattern = paste0(path_csv, "/"), replacement = "", x = path_folder)
if (!length(csv_names)) {
message("\nNo CSV data files in folder <", path_folder, ">\n", sep = "")
next
}
ts_df <- NULL
for (csv_path in csv_paths) {
ts_i <- fread(csv_path, colClasses = list(character = "TimeStamp"))
id_full <- tstrsplit(utils::read.csv(csv_path, skip = 5, nrows = 1)[1, 1], ": ")[[2]]
id_param <- names(ts_i)[2]
param_id_list <- tstrsplit(id_param, "@")
param <- param_id_list[[1]]
plate <- param_id_list[[2]]
site <- plate_info[plate, Site]
unit <- param_info[param, Unit]
source <-
paste0(param, ".") |>
gsub(replacement = "", id_full) |>
gsub(pattern = paste0("@", plate), replacement = "", x = _)
ts_i[, let(
Unit = unit,
ID_full = id_full,
Param = param,
Source = source,
ID = plate,
Site = site
)]
setnames(ts_i, old = id_param, new = "Value")
ts_df <- rbindlist(list(ts_df, na.omit(ts_i, cols = "Value")))
}
# Save the data from this folder
parquet_name <- paste0(folder_name, ".parquet")
parquet_2_save <- file.path(path_out, parquet_name)
arrow::write_parquet(ts_df, parquet_2_save)
msg <- paste0(
"\nAll data from folder <",
path_folder,
"> has been saved as ",
parquet_name,
" in folder ",
path_out
)
cat(msg)
}
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/2_run_after_pwsh_script.R")
arrows::read_parquet("out/dLL.parquet")
arrow::read_parquet("out/dLL.parquet")
ts_df
