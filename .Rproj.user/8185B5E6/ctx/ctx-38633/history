rm(list = ls(all.names = TRUE))
# Set up the path of the project folder
path <- "."
path_out <- file.path(path, "out")
path_csv <- file.path(path_out, "csv")
# Remove the <out> folder
if (dir.exists(path_out)) {
unlink(path_out, recursive = TRUE)
message("\nFolder <out> has been removed!\n")
}
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/1_run_before_pwsh_script.R")
source("C:/Users/lux/OneDrive - Otago Regional Council/r_py/myScript/_ts_AQ/scripts/R/update_plateNo_and_siteName.R")
rm(list = ls(all.names = TRUE))
library(httr)  # Useful tools for working with HTTP organised by HTTP verbs
library(data.table)  # Fast operations on large data frames
time_start <- Sys.time()  # Start the timer
end_point <- "https://aquarius.orc.govt.nz/AQUARIUS/Publish/v2"
r <- GET(
paste0(end_point, "/GetLocationDescriptionList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(r, cat("Check the URL for the requested data!\n"))
desc <- content(r)$LocationDescriptions
desc
rbindlist(desc)
rbindlist(lapply(desc, "[", c("Identifier", "Name")))
rbindlist(lapply(desc, "[", c("Identifier", "Name", "Tags")))
a <- rbindlist(lapply(desc, "[", c("Identifier", "Name", "Tags")))
a['Tags'][1]
a[1, Tags]
param
s
s <- GET(
paste0(end_point, "/GetParameterList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(s, cat("Check the URL for the requested data!\n"))
content(s)
content(s)$LocationDescriptions
names(content(s))
s <- GET(
paste0(end_point, "/GetParameterList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(s, cat("Check the URL for the requested data!\n"))
param <- content(s)$Parameters
rbindlist(param)
rbindlist(lapply(
param,
"[",
c(
"Identifier",
"UnitGroupIdentifier",
"UnitIdentifier",
"DisplayName",
"InterpolationType",
"RoundingSpec"
)
))
rbindlist(lapply(
param,
"[",
c(
"Identifier",
"UnitGroupIdentifier",
"UnitIdentifier",
"DisplayName"
)
))
rbindlist(lapply(
param,
"[",
c(
"Identifier",
"UnitGroupIdentifier",
"UnitIdentifier",
"DisplayName"
)
))[, unique(.SD)]
s <- GET(
paste0(end_point, "/GetParameterList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(s, cat("Check the URL for the requested data!\n"))
param <- content(s)$Parameters
param_df <- rbindlist(
lapply(param, "[", c(
"Identifier",
"UnitGroupIdentifier",
"UnitIdentifier",
"DisplayName"
))
)[, unique(.SD)]
param_df
param_df[Identifier == "Discharge"]
param_df[Identifier == "Rainfall"]
fwrite(param_df, "param_df.csv")
s <- GET(
paste0(end_point, "/GetParameterList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(s, cat("Check the URL for the requested data!\n"))
param <- content(s)$Parameters
param_df <- rbindlist(lapply(param, "[", c("Identifier", "UnitIdentifier")))[, unique(.SD)]
param_df
ref_df
end_point <- "https://aquarius.orc.govt.nz/AQUARIUS/Publish/v2"
r <- GET(
paste0(end_point, "/GetLocationDescriptionList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(r, cat("Check the URL for the requested data!\n"))
desc <- content(r)$LocationDescriptions
ref_df <- rbindlist(lapply(desc, "[", c("Identifier", "Name")))[, unique(.SD)]
setnames(ref_df, old = c("Identifier", "Name"), new = c("ID", "Site"))
s <- GET(
paste0(end_point, "/GetParameterList"),
authenticate("api-read", "PR98U3SKOczINoPHo7WM")
)
stop_for_status(s, cat("Check the URL for the requested data!\n"))
param <- content(s)$Parameters
param_df <- rbindlist(lapply(param, "[", c("Identifier", "UnitIdentifier")))[, unique(.SD)]
ref_df
param_df
# ===================================
# --- Export the obtained information
# ===================================
path_info <- "info"
path_info <- "info"
plate_info <- file.path(path_info, "plate_info.csv")
param_info <- file.path(path_info, "param_info.csv")
param_info
plate_info
desc
plate_df <- rbindlist(lapply(desc, "[", c("Identifier", "Name")))[, unique(.SD)]
setnames(plate_df, old = c("Identifier", "Name"), new = c("ID", "Site"))
plate_df
plate_df
param_df
path_info <- "info"
if (!dir.exists(path_info))
dir.create(path.expand())
plate_info <- file.path(path_info, "plate_info.csv")
param_info <- file.path(path_info, "param_info.csv")
path_info <- "info"
if (!dir.exists(path_info))
dir.create(path.expand())
path_info
(!dir.exists(path_info))
dir.create(path.expand())
dir.create()
path_info <- "info"
if (!dir.exists(path_info))
dir.create(path_info)
path_info <- "info"
if (!dir.exists(path_info))
dir.create(path_info)
fwrite(plate_df, file.path(path_info, "plate_info.csv"))
fwrite(param_df, file.path(path_info, "param_info.csv"))
s
class(s)
